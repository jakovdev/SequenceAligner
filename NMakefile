!IF "$(VSCMD_ARG_TGT_ARCH)" == ""
!ERROR Please run this from the x64 Native Tools Command Prompt for VS 2022
!ENDIF

!IF "$(VSCMD_ARG_TGT_ARCH)" != "x64"
!ERROR Please run this from the x64 Native Tools Command Prompt for VS 2022. Current target: $(VSCMD_ARG_TGT_ARCH)
!ENDIF

!IF EXIST("vcpkg_installed\x64-windows\include")
VCPKG_INCLUDE = /Ivcpkg_installed\x64-windows\include
VCPKG_LIBPATH = /LIBPATH:vcpkg_installed\x64-windows\lib
!ELSE
!ERROR Please install dependencies using vcpkg install in the x64 Native Tools Command Prompt for VS 2022
!ENDIF

!IF DEFINED(HDF5_ROOT)
HDF5_CFLAGS = /I$(HDF5_ROOT)\include
HDF5_LIBS = /LIBPATH:$(HDF5_ROOT)\lib hdf5.lib zlib.lib szip.lib
!ELSE IF EXIST("vcpkg_installed\x64-windows\include\hdf5.h")
HDF5_CFLAGS = $(VCPKG_INCLUDE)
HDF5_LIBS = $(VCPKG_LIBPATH) hdf5.lib zlib.lib szip.lib
!ELSE
!ERROR Please install dependencies using vcpkg install in the x64 Native Tools Command Prompt for VS 2022
!ENDIF

!IF DEFINED(CUDA_PATH)
CUDA_LIB_DIR = $(CUDA_PATH)\lib\x64
CUDA_LIBPATH = /LIBPATH:"$(CUDA_LIB_DIR)"
!ELSE
!ERROR CUDA_PATH not defined. Please install CUDA Toolkit and run this from x64 Native Tools Command Prompt for VS 2022
!ENDIF

SRC_DIR = code\src
INCLUDE_DIR = code\include
BIN_DIR = bin
CUDA_SRC_DIR = code\cuda\src
CUDA_INCLUDE_DIR = code\cuda\include
CUDA_C_BINDINGS_DIR = code\cuda\c_bindings

SRCS = \
    $(SRC_DIR)\main.c \
    $(SRC_DIR)\core\app\args.c \
    $(SRC_DIR)\core\bio\types.c \
    $(SRC_DIR)\core\bio\algorithm\alignment.c \
    $(SRC_DIR)\core\bio\algorithm\indices.c \
    $(SRC_DIR)\core\bio\algorithm\matrix.c \
    $(SRC_DIR)\core\bio\algorithm\global\affine.c \
    $(SRC_DIR)\core\bio\algorithm\global\linear.c \
    $(SRC_DIR)\core\bio\algorithm\local\affine.c \
    $(SRC_DIR)\core\bio\algorithm\local\linear.c \
    $(SRC_DIR)\core\bio\algorithm\method\ga.c \
    $(SRC_DIR)\core\bio\algorithm\method\nw.c \
    $(SRC_DIR)\core\bio\algorithm\method\sw.c \
    $(SRC_DIR)\core\bio\score\matrices.c \
    $(SRC_DIR)\core\bio\score\scoring.c \
    $(SRC_DIR)\core\bio\sequence\filtering.c \
    $(SRC_DIR)\core\bio\sequence\sequences.c \
    $(SRC_DIR)\core\interface\seqalign_hdf5.c \
    $(SRC_DIR)\core\interface\seqalign_cuda.c \
    $(SRC_DIR)\core\io\files.c \
    $(SRC_DIR)\core\io\format\csv.c \
    $(SRC_DIR)\core\io\format\fasta.c \
    $(SRC_DIR)\system\simd.c \
    $(SRC_DIR)\system\arch.c \
    $(SRC_DIR)\util\benchmark.c \
    $(SRC_DIR)\util\print.c \
    $(SRC_DIR)\util\progress.c

CUDA_SRCS = \
    $(CUDA_SRC_DIR)\cuda_kernels.cu \
    $(CUDA_SRC_DIR)\cuda_manager.cu \
    $(CUDA_SRC_DIR)\host_interface.cu

OBJS = $(SRCS:.c=.obj)
OBJS = $(OBJS:code\src\=bin\obj\)

CUDA_OBJS = $(CUDA_SRCS:.cu=.obj)
CUDA_OBJS = $(CUDA_OBJS:code\cuda\src\=bin\cuda_obj\)

CC = cl
BASE_CFLAGS = /I$(INCLUDE_DIR) /I$(CUDA_C_BINDINGS_DIR) /openmp /std:clatest /experimental:c11atomics /Zc:preprocessor /utf-8 /TC /nologo $(VCPKG_INCLUDE) $(HDF5_CFLAGS) /DUSE_CUDA
RELEASE_CFLAGS = $(BASE_CFLAGS) /Ox /GL /DNDEBUG /Gy /MD
DEBUG_CFLAGS = $(BASE_CFLAGS) /Od /Zi /MDd /W4 /RTC1 /analyze /wd28301 /wd6993 /wd6001 /wd6255 /D_CRT_SECURE_NO_WARNINGS

NVCC = nvcc
NVCC_RELEASE_FLAGS = -std=c++20 --extra-device-vectorization -Xcompiler="/Ox /MD" -I$(CUDA_INCLUDE_DIR) -I$(CUDA_C_BINDINGS_DIR)
NVCC_DEBUG_FLAGS = -g -G -O0 -Xcompiler="/W4 /MDd" -I$(CUDA_INCLUDE_DIR) -I$(CUDA_C_BINDINGS_DIR)

LINK = link
LINKFLAGS_RELEASE = /MACHINE:X64 /NOLOGO /LTCG /OPT:REF /OPT:ICF
LINKFLAGS_DEBUG = /MACHINE:X64 /NOLOGO /DEBUG
LIBS = $(HDF5_LIBS) $(CUDA_LIBPATH) cudart.lib getopt.lib Shlwapi.lib

!IF "$(DEBUG)" == "1"
CFLAGS = $(DEBUG_CFLAGS)
NVCC_FLAGS = $(NVCC_DEBUG_FLAGS)
LINKFLAGS = $(LINKFLAGS_DEBUG)
!ELSE
CFLAGS = $(RELEASE_CFLAGS)
NVCC_FLAGS = $(NVCC_RELEASE_FLAGS)
LINKFLAGS = $(LINKFLAGS_RELEASE)
!ENDIF

cuda: $(BIN_DIR)\seqalign.exe

debug:
    @$(MAKE) /NOLOGO /F NMakefile cuda DEBUG=1

$(BIN_DIR)\seqalign.exe: $(OBJS) $(CUDA_OBJS)
    @if not exist $(BIN_DIR) mkdir $(BIN_DIR)
    @echo Linking $@...
    @$(LINK) $(LINKFLAGS) /OUT:$@ $(OBJS) $(CUDA_OBJS) $(LIBS)
    @$(MAKE) /NOLOGO /F NMakefile copy-dlls
    @echo Build complete! Run with: $@

copy-dlls:
    @if exist vcpkg_installed\x64-windows\bin\hdf5.dll if not exist "$(BIN_DIR)\hdf5.dll" copy vcpkg_installed\x64-windows\bin\hdf5.dll "$(BIN_DIR)" >nul
    @if exist vcpkg_installed\x64-windows\bin\getopt.dll if not exist "$(BIN_DIR)\getopt.dll" copy vcpkg_installed\x64-windows\bin\getopt.dll "$(BIN_DIR)" >nul
    @if exist vcpkg_installed\x64-windows\bin\szip.dll if not exist "$(BIN_DIR)\szip.dll" copy vcpkg_installed\x64-windows\bin\szip.dll "$(BIN_DIR)" >nul
    @if exist vcpkg_installed\x64-windows\bin\zlib1.dll if not exist "$(BIN_DIR)\zlib1.dll" copy vcpkg_installed\x64-windows\bin\zlib1.dll "$(BIN_DIR)" >nul

{$(SRC_DIR)}.c{$(BIN_DIR)\obj}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\app}.c{$(BIN_DIR)\obj\core\app}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\bio}.c{$(BIN_DIR)\obj\core\bio}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\bio\algorithm}.c{$(BIN_DIR)\obj\core\bio\algorithm}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\bio\algorithm\global}.c{$(BIN_DIR)\obj\core\bio\algorithm\global}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\bio\algorithm\local}.c{$(BIN_DIR)\obj\core\bio\algorithm\local}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\bio\algorithm\method}.c{$(BIN_DIR)\obj\core\bio\algorithm\method}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\bio\score}.c{$(BIN_DIR)\obj\core\bio\score}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\bio\sequence}.c{$(BIN_DIR)\obj\core\bio\sequence}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\interface}.c{$(BIN_DIR)\obj\core\interface}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\io}.c{$(BIN_DIR)\obj\core\io}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\core\io\format}.c{$(BIN_DIR)\obj\core\io\format}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\util}.c{$(BIN_DIR)\obj\util}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

{$(SRC_DIR)\system}.c{$(BIN_DIR)\obj\system}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(CC) $(CFLAGS) /c $< /Fo$@

.SUFFIXES: .cu
{$(CUDA_SRC_DIR)}.cu{$(BIN_DIR)\cuda_obj}.obj:
    @if not exist $(@D) mkdir $(@D)
    @$(NVCC) $(NVCC_FLAGS) -c $< -o $@

clean:
    @if exist $(BIN_DIR) rmdir /S /Q $(BIN_DIR)
    @echo Cleaned build files

help:
    @echo ===============================================
    @echo                SequenceAligner                
    @echo ===============================================
    @echo.
    @echo Available commands:
    @echo   nmake -f NMakefile help         - Show this help message
    @echo   nmake -f NMakefile cuda         - Build release version
    @echo   nmake -f NMakefile debug        - Build debug version
    @echo   nmake -f NMakefile clean        - Remove built files
    @echo.
